import { Component, OnInit } from '@angular/core';
import { Injectable } from '@angular/core';

declare var go :any;
@Component({
  selector: 'home',
  templateUrl: './home.html'
})
@Injectable()
export class Home implements OnInit{

  public $;
  public myDiagram;
  public jsonIncorrecto = true;
  public input; // input parseado a JSON
  public distancia =0;
  public mismaAltura = 0;
  public nodeDataArray = [];
  public linkDataArray = [];
  public textJoin;
  public inputExample : any = {};
  public texto;
  public myDiagramDiv;


  ngOnInit() {
   this.$ = go.GraphObject.make;
   this.inputExample.Sujeto = {};
   this.inputExample.Sujeto.N = "Pedro";
   this.inputExample.Predicado = {};
   this.inputExample.Predicado.V = "trabaja";
   this.inputExample.Predicado.CCL="en google"
   this.myDiagram = new go.Diagram("myDiagramDiv");
   this.cajaNegra(this.inputExample);
  }

  initDiagramaNOdesTemplate(){
        this.myDiagram.nodeTemplate =
        this.$(go.Node, "Auto",
           new go.Binding("location", "loc", go.Point.parse),
          this.$(go.Shape,
            { figure: "RoundedRectangle",
              fill: "white" },  // default Shape.fill value
            new go.Binding("fill", "color")),  // binding to get fill from nodedata.color
          this.$(go.TextBlock,
            { margin: 5 },
            new go.Binding("text", "key"))  // binding to get TextBlock.text from nodedata.key
        );
        this.myDiagram.nodeTemplateMap.add('rectangulo',  this.$(go.Node, "Auto",
           new go.Binding("location", "loc", go.Point.parse),
          this.$(go.Shape,
            { figure: "RoundedRectangle",
              fill: "white" },  // default Shape.fill value
            new go.Binding("fill", "color")),  // binding to get fill from nodedata.color
          this.$(go.TextBlock,
            { margin: 5 },
            new go.Binding("text", "key"))  // binding to get TextBlock.text from nodedata.key
        ));

        this.myDiagram.nodeTemplateMap.add('elipse',  this.$(go.Node, "Auto",
           new go.Binding("location", "loc", go.Point.parse),
          this.$(go.Shape,
            { figure: "Ellipse",
              fill: "white" },  // default Shape.fill value
            new go.Binding("fill", "color")),  // binding to get fill from nodedata.color
          this.$(go.TextBlock,
            { margin: 5 },
            new go.Binding("text", "key"))  // binding to get TextBlock.text from nodedata.key
        ));


        this.myDiagram.linkTemplate = // por defecto
        this.$(go.Link,
          this.$(go.Shape),
          this.$(go.Shape, { toArrow: "Standard" }),
          this.$(go.TextBlock, this.textJoin, { segmentOffset: new go.Point(0, -10) })  // aqui se le pone la flecha el noombe que deseemmos :)
        );

        this.myDiagram.linkTemplateMap.add("Normal", this.$(go.Link,
          this.$(go.Shape),
          this.$(go.Shape, { toArrow: "Standard" }),
          this.$(go.TextBlock, this.textJoin, { segmentOffset: new go.Point(0, -10) })  // aqui se le pone la flecha el noombe que deseemmos :)
        ));

        this.myDiagram.linkTemplateMap.add("NormalSinText", this.$(go.Link,
          this.$(go.Shape),
          this.$(go.Shape, { toArrow: "Standard" }) // aqui se le pone la flecha el noombe que deseemmos :)
        ));

        this.myDiagram.linkTemplateMap.add("LineaUnionSimple", this.$(go.Link,
          this.$(go.Shape),
          this.$(go.TextBlock, "", { segmentOffset: new go.Point(0, -10) })  // aqui se le pone la flecha el noombe que deseemmos :)
        ));

        this.myDiagram.linkTemplateMap.add("influence",  // Linea curva 
        this.$(go.Link,
          { curve: go.Link.Bezier, toShortLength: 8 },
          this.$(go.Shape,
            { stroke: "green", strokeWidth: 1.5 }),
          this.$(go.Shape,
            {
              fill: "green",
              stroke: null,
              toArrow: "Standard",
              scale: 1.5
            })
        ));
    }

  createAndAddNode(text , color, tipoNodo, position){
        let node: any = {};      
        node.key = text;
        node.color =  color || "lightblue";
        node.category = tipoNodo || "Auto";
        node.loc =position || (this.distancia +" " + ++this.mismaAltura)
        this.distancia+=200
        if(this.distancia === 0 || this.distancia===200)
          this.mismaAltura+=200
        this.nodeDataArray.push(node);
    }
  addLinks(key1, key2, tipoUnion){
      let link : any = {};
      link.from = key1;
      link.to = key2;
      link.category = tipoUnion || "Normal";
      this.linkDataArray.push(link);
  }
  cajaNegra(inputExample){

    this.restauraInicio(); //Volvemos al estado cero

    console.log("Datas inicial",this.nodeDataArray)
    if(typeof inputExample === "string")
      inputExample = this.devuelveParseo(inputExample)
    
    let sujetoPredicado = this.tratantoSujeto(inputExample);
    let parteQueRecibeAccion = this.tratandoPredicado(inputExample);

    //Uniones preficado
    if(inputExample.Predicado.CI && parteQueRecibeAccion === inputExample.Predicado.CI[1])
      console.log("no imprimo nada")
    else if(inputExample.Predicado.CI && inputExample.Predicado.CI.length === 2)
      this.addLinks(parteQueRecibeAccion, inputExample.Predicado.CI[1], 'NormalSinText');
    else if(inputExample.Predicado.CI && inputExample.Predicado.CI.length === 1 && inputExample.Predicado.CI[0].toLowerCase() !== 'le'){
      this.addLinks(parteQueRecibeAccion, inputExample.Predicado.CI[0], 'NormalSinText');
    }
    if(inputExample.Predicado.CP)
      this.addLinks(parteQueRecibeAccion, inputExample.Predicado.CP, 'LineaUnionSimple');
    if(inputExample.Predicado.CCT && parteQueRecibeAccion !== inputExample.Predicado.CCT)
      this.addLinks(parteQueRecibeAccion, inputExample.Predicado.CCT[0], 'LineaUnionSimple');
    if(inputExample.Predicado.CCM)
      this.addLinks(parteQueRecibeAccion, inputExample.Predicado.CCM, 'LineaUnionSimple');
    

    //Union entidades principlaes
    this.addLinks(sujetoPredicado, parteQueRecibeAccion, undefined);


    //Inicializando templade
    this.initDiagramaNOdesTemplate();
    this.myDiagram.model = new go.GraphLinksModel(this.nodeDataArray, this.linkDataArray)
    
  }


  restauraInicio(){ //Funcion que devuelve los valores iniciales
    this.myDiagram.clear()
    this.nodeDataArray = [];
    this.linkDataArray = [];
    this.textJoin="";
    this.distancia =0;
    this.mismaAltura = 0;
    this.createAndAddNode('DIBUJANDO EL DIAGRAMA',undefined,undefined,'0 0');
  }

  tratantoSujeto(inputExample){
     /////
    //Analizando el sujeto
    let sujetoPredicado = inputExample.Sujeto.N;
    if(inputExample.Sujeto.Det){
      let determinantes = "";
      for (var i = 0; i < inputExample.Sujeto.Det.length; ++i) {
          determinantes += inputExample.Sujeto.Det[i] + " ";
      }
      sujetoPredicado = determinantes + sujetoPredicado;
    }   
    this.createAndAddNode(sujetoPredicado,undefined,'rectangulo','300 200'); // creado el sujeto
    //Uniones en el sujeto con adjetvo
    if(inputExample.Sujeto.Adj && !inputExample.Sujeto.SP){
      this.createAndAddNode(inputExample.Sujeto.Adj,undefined,'elipse','290 100');
      this.addLinks(inputExample.Sujeto.Adj,sujetoPredicado, 'LineaUnionSimple');
    }
    else if(!inputExample.Sujeto.Adj && inputExample.Sujeto.SP){
      this.createAndAddNode(inputExample.Sujeto.SP,undefined,'rectangulo','290 100');
      this.addLinks(sujetoPredicado,inputExample.Sujeto.SP, 'NormalSinText');
    }
    else if(inputExample.Sujeto.Adj && inputExample.Sujeto.SP){
      this.createAndAddNode(inputExample.Sujeto.SP,undefined,'rectangulo','320 100');
      this.createAndAddNode(inputExample.Sujeto.Adj,undefined,'eclipse','250 100');
      this.addLinks(sujetoPredicado,inputExample.Sujeto.SP, 'NormalSinText');
      this.addLinks(inputExample.Sujeto.Adj,sujetoPredicado, 'LineaUnionSimple');
    }
    return sujetoPredicado;
  }

  tratandoPredicado(inputExample){

    let verboPredicado = inputExample.Predicado.V;
    if(inputExample.Predicado.CI && inputExample.Predicado.CI.length === 1){
      if(inputExample.Predicado.CI[0].toLowerCase() === 'le' )
        verboPredicado = inputExample.Predicado.CI[0] + " " + verboPredicado;
      else if(inputExample.Predicado.CI){
        this.createAndAddNode(inputExample.Predicado.CI[0],undefined,'rectangulo','500 100');
      }
    }
    else if(inputExample.Predicado.CI && inputExample.Predicado.CI.length === 2 && inputExample.Predicado.CD){
      verboPredicado = inputExample.Predicado.CI[0] + " " + verboPredicado;
      this.createAndAddNode(inputExample.Predicado.CI[1],undefined,'rectangulo','500 100');
    }
    else if(inputExample.Predicado.CI && inputExample.Predicado.CI.length === 2 && !inputExample.Predicado.CD){
      verboPredicado = inputExample.Predicado.CI[0] + " " + verboPredicado;
      //this.createAndAddNode(inputExample.Predicado.CI[1],undefined,'rectangulo','500 100');
    }
    
    if(inputExample.Predicado.CP)
       this.createAndAddNode(inputExample.Predicado.CP,undefined,'elipse','500 100');
      if(inputExample.Predicado.CCT && inputExample.Predicado.CD){
           if(!inputExample.Predicado.CP)
                  this.createAndAddNode(inputExample.Predicado.CCT[0],undefined,'rectangulo','500 100');
           else{
                  for (var i = 0; i < this.nodeDataArray.length; ++i) {
                    if(this.nodeDataArray[i].key === inputExample.Predicado.CP){
                      this.nodeDataArray.splice(i,1)
                       this.createAndAddNode(inputExample.Predicado.CP,undefined,'elipse','400 100');
                       this.createAndAddNode(inputExample.Predicado.CCT[0],undefined,'rectangulo','500 100');
                       break;
                    }
         
                  }
            }
       }

    
     
    if(inputExample.Predicado.CCM)
      this.createAndAddNode(inputExample.Predicado.CCM,undefined,'rectangulo','500 100');
    if(inputExample.Predicado.CCT && inputExample.Predicado.CCT[1])
      this.createAndAddNode(inputExample.Predicado.CCT[1],undefined,'rectangulo','600 100');
    this.textJoin = verboPredicado
    //Parte que recibe la accion 
    let parteQueRecibeAccion;
    if(inputExample.Predicado.CD && !inputExample.Predicado.CI){
      parteQueRecibeAccion = inputExample.Predicado.CD
      this.createAndAddNode(parteQueRecibeAccion,undefined,'rectangulo','500 200');
    }
    else if(inputExample.Predicado.CCL){
      parteQueRecibeAccion = inputExample.Predicado.CCL
      this.createAndAddNode(parteQueRecibeAccion,undefined,'rectangulo','500 200');
    }
    else if(!inputExample.Predicado.CD && inputExample.Predicado.CI){
      if((inputExample.Predicado.CI.length ===1 && inputExample.Predicado.CI[0] !== 'le') || (inputExample.Predicado.CI.length ===2)){
        parteQueRecibeAccion = inputExample.Predicado.CI[1] || inputExample.Predicado.CI[0] 
        this.createAndAddNode(parteQueRecibeAccion,undefined,'rectangulo','500 200');
      }
    }
    else if( (!inputExample.Predicado.CD && inputExample.Predicado.CCT && !inputExample.Predicado.CI) || !inputExample.Predicado.CD && inputExample.Predicado.CCT && (inputExample.Predicado.CI && inputExample.Predicado.CI.length ===1 && inputExample.Predicado.CI[0]==='le') ){
      parteQueRecibeAccion = inputExample.Predicado.CCT[0]
      this.createAndAddNode(parteQueRecibeAccion,undefined,'rectangulo','500 200');
    }
    return parteQueRecibeAccion;
  }
  devuelveParseo(texto){
    try{
      return JSON.parse(texto);
    }
    catch(e){
      return null;
    }
  }

  IsJsonString(str) {
      if(str==="")
        this.jsonIncorrecto=true;
        else{
           try {
            this.input = JSON.parse(str);
            this.jsonIncorrecto=true;
        } catch (e) {
          this.jsonIncorrecto=false;
           
        }
      }
  }
}